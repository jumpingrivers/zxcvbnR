% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_password.R
\name{check_password}
\alias{check_password}
\title{Check password}
\usage{
check_password(password)
}
\arguments{
\item{password}{Character string to assess}
}
\description{
zxcvbn is a password strength estimator inspired by password crackers.
Through pattern matching and conservative estimation, it recognizes and weighs 30k common passwords,
common names and surnames according to US census data, popular English words from
Wikipedia and US television and movies, and other common patterns like dates,
repeats (aaa), sequences (abcd), keyboard patterns (qwertyuiop), and l33t speak.
}
\details{
The main result is returned as an invisible list.

This package provides an R interface to the underlying Javascript code. See
the \href{https://github.com/dropbox/zxcvbn}{GitHub} homepage for further details about the JS library.
@details
The function returns a list with the following components
\itemize{
\item guesses:  estimated guesses needed to crack password
\item guesses_log10: order of magnitude of guesses
\item crack_times_seconds : dictionary of back-of-the-envelope crack time estimations, in seconds, based on a few scenarios:
\itemize{
\item online_throttling_100_per_hour: online attack on a service that ratelimits password auth attempts
\item online_no_throttling_10_per_second: online attack on a service that doesn't ratelimit, or
where an attacker has outsmarted ratelimiting
\item offline_slow_hashing_1e4_per_second: offline attack.
Assumes multiple attackers, proper user-unique salting, and a slow hash function
w/ moderate work factor, such as bcrypt, scrypt, PBKDF2
\item offline_fast_hashing_1e10_per_second: offline attack with user-unique salting but a fast hash function like SHA-1, SHA-256 or MD5.
A wide range of reasonable numbers anywhere from one billion - one trillion
guesses per second, depending on number of cores and machines. ballparking at 10B/sec.
}
\item crack_times_display: same keys as crack_times_seconds, with friendlier display string values:
"less than a second", "3 hours", "centuries", etc.
\item score:  Integer from 0-4 (useful for implementing a strength bar)
\itemize{
\item 0 too guessable: risky password. (guesses < 10^3)
\item 1  very guessable: protection from throttled online attacks. (guesses < 10^6)
\item 2 somewhat guessable: protection from unthrottled online attacks. (guesses < 10^8)
\item 3 safely unguessable: moderate protection from offline slow-hash scenario. (guesses < 10^10)
\item 4 very unguessable: strong protection from offline slow-hash scenario. (guesses >= 10^10)
}
\item feedback: verbal feedback to help choose better passwords. set when score <= 2.
\itemize{
\item feedback.warning:  explains what's wrong, eg. 'this is a top-10 common password'.
Sometimes an empty string
\item feedback.suggestions a possibly-empty list of suggestions to help choose a less
guessable password. eg. 'Add another word or two'
}
\item sequence: the list of patterns that zxcvbn based the guess calculation on.
\item calc_time: how long it took zxcvbn to calculate an answer, in milliseconds.
}
}
\examples{
res = check_password("ABC")
res$feedback

}
\seealso{
https://github.com/dropbox/zxcvbn and
this \href{https://blogs.dropbox.com/tech/2012/04/zxcvbn-realistic-password-strength-estimation/}{blog post}
}
